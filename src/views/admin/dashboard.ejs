<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/style.css">
    <script>
        // Check authentication immediately
        (function() {
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/admin/login';
            }
        })();
    </script>
</head>
<body class="bg-gray-100">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-6xl mx-auto px-4">
            <div class="flex justify-between">
                <div class="flex space-x-7">
                    <div>
                        <a href="/admin/dashboard" class="flex items-center py-4">
                            <span class="font-semibold text-gray-500 text-lg">MICA Admin</span>
                        </a>
                    </div>
                </div>
                <div class="flex items-center">
                    <button id="logout-btn" class="py-2 px-4 bg-red-500 text-white rounded hover:bg-red-600 transition duration-300">
                        Logout
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Dashboard Content -->
    <div class="container mx-auto px-4 py-8">
        <h2 class="text-3xl font-bold text-gray-900 mb-8">Admin Dashboard</h2>
        
        <!-- Tabs -->
        <div class="mb-8 border-b border-gray-200">
            <ul class="flex flex-wrap -mb-px">
                <li class="mr-2">
                    <button id="tab-products" class="inline-block py-2 px-4 text-green-500 border-b-2 border-green-500 font-semibold">
                        Products
                    </button>
                </li>
                <li class="mr-2">
                    <button id="tab-contacts" class="inline-block py-2 px-4 text-gray-500 hover:text-green-500 font-semibold">
                        Contact Submissions
                    </button>
                </li>
            </ul>
        </div>
        
        <!-- Products Tab Content -->
        <div id="products-content" class="tab-content">
            <div class="flex justify-end mb-4">
                <button id="add-product-btn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300">
                    Add New Product
                </button>
            </div>
            
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Image
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Description
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="products-table" class="bg-white divide-y divide-gray-200">
                        <!-- Products will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Contacts Tab Content -->
        <div id="contacts-content" class="tab-content hidden">
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Email
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Phone
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Product
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Message
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="contacts-table" class="bg-white divide-y divide-gray-200">
                        <!-- Contacts will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Product Modal -->
    <div id="product-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
            <h2 id="modal-title" class="text-xl font-bold text-gray-900 mb-4">Add New Product</h2>
            
            <form id="product-form" enctype="multipart/form-data">
                <input type="hidden" id="product-id">
                
                <div class="mb-4">
                    <label for="product-name" class="block text-gray-700 font-medium mb-2">Name</label>
                    <input type="text" id="product-name" name="name" required
                        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                
                <div class="mb-4">
                    <label for="product-description" class="block text-gray-700 font-medium mb-2">Description (Optional)</label>
                    <textarea id="product-description" name="description" rows="3"
                        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"></textarea>
                </div>
                
                <div class="mb-6">
                    <label for="product-image" class="block text-gray-700 font-medium mb-2">Image</label>
                    <input type="file" id="product-image" name="image" accept="image/*"
                        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
                    <div id="current-image-container" class="mt-2 hidden">
                        <p class="text-sm text-gray-600">Current image:</p>
                        <img id="current-image" src="" alt="Current product image" class="mt-1 h-20 object-contain">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancel-product"
                        class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 transition duration-300">
                        Cancel
                    </button>
                    <button type="submit"
                        class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-300">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
            <h2 class="text-xl font-bold text-gray-900 mb-4">Confirm Delete</h2>
            <p class="text-gray-600 mb-6">Are you sure you want to delete this item? This action cannot be undone.</p>
            
            <div class="flex justify-end space-x-4">
                <button id="cancel-delete"
                    class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 transition duration-300">
                    Cancel
                </button>
                <button id="confirm-delete"
                    class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-300">
                    Delete
                </button>
            </div>
        </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Tab switching
        const tabProducts = document.getElementById('tab-products');
        const tabContacts = document.getElementById('tab-contacts');
        const productsContent = document.getElementById('products-content');
        const contactsContent = document.getElementById('contacts-content');

        tabProducts.addEventListener('click', () => {
          productsContent.classList.remove('hidden');
          contactsContent.classList.add('hidden');
          tabProducts.classList.add(
            'text-green-500',
            'border-b-2',
            'border-green-500'
          );
          tabProducts.classList.remove('text-gray-500', 'hover:text-green-500');
          tabContacts.classList.add('text-gray-500', 'hover:text-green-500');
          tabContacts.classList.remove(
            'text-green-500',
            'border-b-2',
            'border-green-500'
          );
        });

        tabContacts.addEventListener('click', () => {
          contactsContent.classList.remove('hidden');
          productsContent.classList.add('hidden');
          tabContacts.classList.add(
            'text-green-500',
            'border-b-2',
            'border-green-500'
          );
          tabContacts.classList.remove('text-gray-500', 'hover:text-green-500');
          tabProducts.classList.add('text-gray-500', 'hover:text-green-500');
          tabProducts.classList.remove(
            'text-green-500',
            'border-b-2',
            'border-green-500'
          );

          // Load contacts when tab is clicked
          fetchContacts();
        });

        // Fetch products on page load
        fetchProducts();

        // Product modal
        const productModal = document.getElementById('product-modal');
        const productForm = document.getElementById('product-form');
        const modalTitle = document.getElementById('modal-title');
        const productId = document.getElementById('product-id');
        const productName = document.getElementById('product-name');
        const productDescription = document.getElementById('product-description');
        const productImage = document.getElementById('product-image');
        const currentImageContainer = document.getElementById('current-image-container');
        const currentImage = document.getElementById('current-image');

        // Add product button
        document.getElementById('add-product-btn').addEventListener('click', () => {
          modalTitle.textContent = 'Add New Product';
          productId.value = '';
          productForm.reset();
          currentImageContainer.classList.add('hidden');
          productImage.required = true;
          productModal.classList.remove('hidden');
        });

        // Cancel product button
        document.getElementById('cancel-product').addEventListener('click', () => {
          productModal.classList.add('hidden');
        });

        // Product form submission
        productForm.addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = new FormData();
          formData.append('name', productName.value);
          formData.append('description', productDescription.value);

          if (productImage.files[0]) {
            formData.append('image', productImage.files[0]);
          }

          let url = '/api/products';
          let method = 'POST';

          if (productId.value) {
            url = `/api/products/${productId.value}`;
            method = 'PUT';
          }

          try {
            const response = await fetch(url, {
              method,
              body: formData,
              headers: {
                Authorization: `Bearer ${localStorage.getItem('token')}`,
              },
            });

            const data = await response.json();

            if (data.success) {
              productModal.classList.add('hidden');
              fetchProducts();
            } else if (response.status === 401) {
              // Unauthorized - redirect to login
              localStorage.removeItem('token');
              window.location.href = '/admin/login';
            }
          } catch (error) {
            console.error('Error saving product:', error);
          }
        });

        // Delete modal
        const deleteModal = document.getElementById('delete-modal');
        let deleteItemId = null;
        let deleteItemType = null;

        // Cancel delete button
        document.getElementById('cancel-delete').addEventListener('click', () => {
          deleteModal.classList.add('hidden');
        });

        // Confirm delete button
        document.getElementById('confirm-delete').addEventListener('click', async () => {
          if (!deleteItemId || !deleteItemType) return;

          let url;
          if (deleteItemType === 'product') {
            url = `/api/products/${deleteItemId}`;
          } else if (deleteItemType === 'contact') {
            url = `/api/contact/${deleteItemId}`;
          }

          try {
            const response = await fetch(url, {
              method: 'DELETE',
              headers: {
                Authorization: `Bearer ${localStorage.getItem('token')}`,
              },
            });

            const data = await response.json();

            if (data.success) {
              deleteModal.classList.add('hidden');
              if (deleteItemType === 'product') {
                fetchProducts();
              } else if (deleteItemType === 'contact') {
                fetchContacts();
              }
            } else if (response.status === 401) {
              // Unauthorized - redirect to login
              localStorage.removeItem('token');
              window.location.href = '/admin/login';
            }
          } catch (error) {
            console.error('Error deleting item:', error);
          }
        });

        // Logout button
        document.getElementById('logout-btn').addEventListener('click', async () => {
          try {
            await fetch('/api/admin/logout');
            localStorage.removeItem('token');
            window.location.href = '/admin/login';
          } catch (error) {
            console.error('Error logging out:', error);
            // Redirect anyway
            localStorage.removeItem('token');
            window.location.href = '/admin/login';
          }
        });

        // Fetch products function
        async function fetchProducts() {
          try {
            const response = await fetch('/api/products');
            const data = await response.json();

            if (data.success) {
              renderProducts(data.data);
            }
          } catch (error) {
            console.error('Error fetching products:', error);
          }
        }

        // Render products function
        function renderProducts(products) {
          const productsTable = document.getElementById('products-table');
          productsTable.innerHTML = '';

          products.forEach((product) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <img src="${product.image}" alt="${product.name}" class="h-16 w-16 object-cover rounded">
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${product.name}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-500">${product.description || ''}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button class="text-green-600 hover:text-green-900 mr-3 edit-product" data-id="${product._id}">Edit</button>
                    <button class="text-red-600 hover:text-red-900 delete-product" data-id="${product._id}">Delete</button>
                </td>
            `;
            productsTable.appendChild(row);
          });

          // Add event listeners to edit buttons
          document.querySelectorAll('.edit-product').forEach((button) => {
            button.addEventListener('click', async () => {
              const id = button.getAttribute('data-id');
              try {
                const response = await fetch(`/api/products/${id}`);
                const data = await response.json();

                if (data.success) {
                  const product = data.data;
                  modalTitle.textContent = 'Edit Product';
                  productId.value = product._id;
                  productName.value = product.name;
                  productDescription.value = product.description || '';
                  currentImage.src = product.image;
                  currentImageContainer.classList.remove('hidden');
                  productImage.required = false;
                  productModal.classList.remove('hidden');
                }
              } catch (error) {
                console.error('Error fetching product details:', error);
              }
            });
          });

          // Add event listeners to delete buttons
          document.querySelectorAll('.delete-product').forEach((button) => {
            button.addEventListener('click', () => {
              deleteItemId = button.getAttribute('data-id');
              deleteItemType = 'product';
              deleteModal.classList.remove('hidden');
            });
          });
        }

        // Fetch contacts function
        async function fetchContacts() {
          try {
            const response = await fetch('/api/contact', {
              headers: {
                Authorization: `Bearer ${localStorage.getItem('token')}`,
              },
            });

            if (response.status === 401) {
              // Unauthorized - redirect to login
              localStorage.removeItem('token');
              window.location.href = '/admin/login';
              return;
            }

            const data = await response.json();

            if (data.success) {
              renderContacts(data.data);
            }
          } catch (error) {
            console.error('Error fetching contacts:', error);
          }
        }

        // Render contacts function
        function renderContacts(contacts) {
          const contactsTable = document.getElementById('contacts-table');
          contactsTable.innerHTML = '';

          contacts.forEach((contact) => {
            const row = document.createElement('tr');
            
            // Format product names
            let productDisplay = 'N/A';
            if (contact.productNames && contact.productNames.length > 0) {
              productDisplay = contact.productNames.join(', ');
            }
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${contact.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-500">${contact.email}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-500">${contact.phone || ''}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-500">${productDisplay}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-500">${contact.message || ''}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button class="text-red-600 hover:text-red-900 delete-contact" data-id="${contact._id}">Delete</button>
                </td>
            `;
            contactsTable.appendChild(row);
          });

          // Add event listeners to delete buttons
          document.querySelectorAll('.delete-contact').forEach((button) => {
            button.addEventListener('click', () => {
              deleteItemId = button.getAttribute('data-id');
              deleteItemType = 'contact';
              deleteModal.classList.remove('hidden');
            });
          });
        }
      });
    </script>
</body>
</html>